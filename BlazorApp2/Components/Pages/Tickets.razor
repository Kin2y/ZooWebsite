@using BlazorApp2.Models
@using BlazorApp2.Services
@using BlazorApp2.Utilities
@inject TicketbookingService TicketbookingService
@inject TicketService TicketService
@inject UserSession UserSession
@inject AttractionService AttractionService
@inject NavigationManager NavigationManager

@rendermode InteractiveServer
@page "/tickets"


<h3>Tickets</h3>

@if (attractions != null)
{
    @foreach (Attraction attraction in attractions)
    {
        <div>
            @attraction.Name: £@attraction.Price
            <button @onclick="@(e => AddTicket(attraction.AttractionId))">Add to basket</button>
        </div>
    }
    <input type="date" min=@DateTime.Now.ToString("yyyy-MM-dd") @bind=@ticketDate>
    <button @onclick=@BookTickets>Book Tickets</button>
}
else
{
    <div>no attractions</div>    
}

@if (tickets != null && tickets.Count != 0)
{
    @foreach (Ticket ticket in tickets)
    {
        <div>@ticket.TicketId, @ticket.AttractionId</div>
    }
}
else
{
    <div>Your tickets will show here...</div>
}


@if (ShowLoginPopup)
{
    <div class="popup-overlay">
        <div class="popup-content">
            <h2>Login Required</h2>
            <p>You need to log in to book tickets.</p>
            <button @onclick="RedirectToLogin">Log In</button>
            <button @onclick="ClosePopup">Close</button>
        </div>
    </div>
}

<style>
    .popup-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 1000;
    }

    .popup-content {
        background: white;
        padding: 20px;
        border-radius: 10px;
        text-align: center;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.3);
    }

        .popup-content button {
            margin: 10px;
            padding: 10px 20px;
            border: none;
            background-color: #007bff;
            color: white;
            border-radius: 5px;
            cursor: pointer;
        }

            .popup-content button:hover {
                background-color: #0056b3;
            }
</style>



@code {
    List<Attraction> attractions;
    List<Ticket> tickets;
    DateOnly ticketDate;
    Ticketbooking newTicketbooking;
    private bool ShowLoginPopup { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (UserSession.UserId == 0)
        {
            NavigationManager.NavigateTo("/");
            ShowLoginPopup = true; // Set a flag to show the popup
        }
        else
        {
            attractions = await AttractionService.GetAttractionsAsync();
            tickets = new List<Ticket>();
            newTicketbooking = new Ticketbooking();
        }
    }

    private void RedirectToLogin()
    {
        NavigationManager.NavigateTo("/login"); // Navigate to the login page
    }
    private void ClosePopup()
    {
        ShowLoginPopup = false;
    }

    private void AddTicket(int attractionId)
    {
        Console.WriteLine("AddTicket button was clicked.");
        Ticket newTicket = new Ticket();
        newTicket.AttractionId = attractionId;
        tickets.Add(newTicket);
    }
    private async Task BookTickets()
    {
        //this one books all the tickets in the basket
        Ticketbooking newTicketbooking = new Ticketbooking();
        newTicketbooking.CustomerId = UserSession.UserId;
        newTicketbooking.Date = ticketDate;
        newTicketbooking.Date = DateOnly.FromDateTime(DateTime.Now);
        await TicketbookingService.AddTicketbookingAsync(newTicketbooking);
        foreach (Ticket ticket in tickets)
        {
            ticket.Ticketbooking = newTicketbooking;
            await TicketService.AddTicketAsync(ticket);
        }

    }
}
